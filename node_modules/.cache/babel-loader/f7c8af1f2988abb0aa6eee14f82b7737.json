{"ast":null,"code":"import _defineProperty from \"/Users/miron/Desktop/polytech/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/miron/Desktop/polytech/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { Root, View, Panel } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport './style.css';\nimport EnterStart from './panels/EnterStart';\nimport EnterFinish from './panels/EnterFinish';\nimport { VIEW_ENTER, PANEL_MAIN, VIEW_MAIN, PANEL_ENTER_START, PANEL_ENTER_FINISH, panels, panelsOrder, getViewByPanel, VIEW_EVENT_INFO, PANEL_EVENT_INFO } from './constants';\nimport Main from './panels/Main';\nimport EventInfo from './panels/EventInfo';\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.go = panelId => {\n      if (!panels.includes(panelId)) {\n        throw new Error('[App.go] panelId is not found in panels');\n      }\n\n      const viewId = getViewByPanel(panelId);\n      this.setState({\n        activeView: viewId,\n        activePanels: _objectSpread({}, this.state.activePanels, {\n          [viewId]: panelId\n        })\n      });\n    };\n\n    this.update = (panelId, newState, options = {}, next) => {\n      return new Promise(resolve => {\n        if (options.clean) {\n          this.setState({\n            [panelId]: newState\n          }, next || resolve);\n        } else {\n          this.setState(state => ({\n            [panelId]: _objectSpread({}, state[panelId], {}, newState)\n          }), next || resolve);\n        }\n      });\n    };\n\n    this.state = _objectSpread({\n      activeView: VIEW_ENTER,\n      activePanels: Object.keys(panelsOrder).reduce((acc, viewId) => {\n        acc[viewId] = panelsOrder[viewId][0];\n        return acc;\n      }, {})\n    }, panels.reduce((acc, panelId) => {\n      acc[panelId] = {};\n      return acc;\n    }, {}));\n    console.log(this.state);\n  }\n\n  render() {\n    return React.createElement(Root, {\n      activeView: this.state.activeView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(View, {\n      id: VIEW_ENTER,\n      activePanel: this.state.activePanels[VIEW_ENTER],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      id: PANEL_ENTER_START,\n      theme: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(EnterStart, Object.assign({}, this.state[PANEL_ENTER_START], {\n      update: this.update,\n      go: this.go,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }))), React.createElement(Panel, {\n      id: PANEL_ENTER_FINISH,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(EnterFinish, Object.assign({}, this.state[PANEL_ENTER_FINISH], {\n      update: this.update,\n      go: this.go,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })))), React.createElement(View, {\n      id: VIEW_MAIN,\n      activePanel: this.state.activePanels[VIEW_MAIN],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      id: PANEL_MAIN,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Main, Object.assign({}, this.state[PANEL_MAIN], {\n      update: this.update,\n      go: this.go,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })))), React.createElement(View, {\n      id: VIEW_EVENT_INFO,\n      activePanel: this.state.activePanels[VIEW_EVENT_INFO],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      id: PANEL_EVENT_INFO,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(EventInfo, Object.assign({\n      id: PANEL_EVENT_SENT\n    }, this.state[PANEL_EVENT_INFO], {\n      update: this.update,\n      go: this.go,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/miron/Desktop/polytech/src/App.js"],"names":["React","Component","Root","View","Panel","EnterStart","EnterFinish","VIEW_ENTER","PANEL_MAIN","VIEW_MAIN","PANEL_ENTER_START","PANEL_ENTER_FINISH","panels","panelsOrder","getViewByPanel","VIEW_EVENT_INFO","PANEL_EVENT_INFO","Main","EventInfo","App","constructor","props","go","panelId","includes","Error","viewId","setState","activeView","activePanels","state","update","newState","options","next","Promise","resolve","clean","Object","keys","reduce","acc","console","log","render","PANEL_EVENT_SENT"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Root, View, Panel } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport './style.css';\n\nimport EnterStart from './panels/EnterStart';\nimport EnterFinish from './panels/EnterFinish';\n\nimport { VIEW_ENTER, PANEL_MAIN, VIEW_MAIN, PANEL_ENTER_START, PANEL_ENTER_FINISH, panels, panelsOrder, getViewByPanel, VIEW_EVENT_INFO, PANEL_EVENT_INFO } from './constants';\nimport Main from './panels/Main';\nimport EventInfo from './panels/EventInfo';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeView: VIEW_ENTER,\n      activePanels: Object.keys(panelsOrder).reduce((acc, viewId) => {\n        acc[viewId] = panelsOrder[viewId][0];\n        return acc;\n      }, {}),\n\n      ...panels.reduce((acc, panelId) => {\n        acc[panelId] = {};\n        return acc;\n      }, {}),\n    };\n\n    console.log(this.state);\n  }\n\n  go = (panelId) => {\n    if (!panels.includes(panelId)) {\n      throw new Error('[App.go] panelId is not found in panels');\n    }\n\n    const viewId = getViewByPanel(panelId);\n\n    this.setState({\n      activeView: viewId,\n      activePanels: {\n        ...this.state.activePanels,\n        [viewId]: panelId,\n      },\n    });\n  };\n\n  /**\n   * Обновляет state панели\n   *\n   * @param {string} panelId id панели\n   * @param {object} newState Объект стейта, который нужно смержить с текущим\n   * @param {object} options\n   * @param {function} next Колбек, который будет вызван после обновления стейта\n   */\n  update = (panelId, newState, options = {}, next) => {\n    return new Promise((resolve) => {\n      if (options.clean) {\n        this.setState({ [panelId]: newState }, next || resolve);\n      } else {\n        this.setState((state) => ({\n          [panelId]: {\n            ...state[panelId],\n            ...newState,\n          },\n        }), next || resolve);\n      }\n    });\n  };\n\n  render() {\n    return (\n      <Root activeView={this.state.activeView}>\n        <View id={VIEW_ENTER} activePanel={this.state.activePanels[VIEW_ENTER]}>\n          <Panel id={PANEL_ENTER_START} theme=\"white\">\n            <EnterStart\n              {...this.state[PANEL_ENTER_START]}\n              update={this.update}\n              go={this.go}\n            />\n          </Panel>\n\n          <Panel id={PANEL_ENTER_FINISH}>\n            <EnterFinish\n              {...this.state[PANEL_ENTER_FINISH]}\n              update={this.update}\n              go={this.go}\n            />\n          </Panel>\n        </View>\n\n        <View id={VIEW_MAIN} activePanel={this.state.activePanels[VIEW_MAIN]}>\n          <Panel id={PANEL_MAIN}>\n            <Main\n              {...this.state[PANEL_MAIN]}\n              update={this.update}\n              go={this.go}\n            />\n          </Panel>\n        </View>\n\n        <View id={VIEW_EVENT_INFO} activePanel={this.state.activePanels[VIEW_EVENT_INFO]}>\n          <Panel id={PANEL_EVENT_INFO}>\n            <EventInfo id={PANEL_EVENT_SENT}\n              {...this.state[PANEL_EVENT_INFO]}\n              update={this.update}\n              go={this.go}\n            />\n          </Panel>\n        </View>\n      </Root>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}